SSM整合思路:
前期工作:
1.数据库的创建或导入数据
2.搭建maven项目并创建骨架
3.导入pom文件中所需的坐标

具体步骤:
1.保证spring中的IOC依赖可以独立运行(业务层)
2.保证mybatis可以独立运行(持久层)
3.整合spring和mybatis
     a.接管mybatis的sqlSessionFactory对象
     b.接管dao接口中所对应的映射
4.整合spring与springMVC
      a.在web.xml中设置核心控制器,过滤器,对spring进行监听
      b.在webApplication.xml中扫描包至controller下,支持mvc注解的设置,配置视图解析器
         补充:1.静态资源配置 2.配置异常解析器 3.强制类型转换配置 4.拦截配置
      

具体实现:
1.创建domain实体类(三层架构中的依赖,都会用)
2.创建业务层方法和实现类(service)
       a.在实现类中写入随意语句,输出进行测试,
       b.创建spring中需要的xml文件,扫描注解的配置,排除controller
       c.测试业务层的输出语句的执行
3.创建持久层接口和映射文件设置(对数据库的操作)
    注意事项:映射文件的结构与名称应和接口中的设置一样(com.itheima.UserDao.xml与com.itheima.UserDao)
4.spring与mybatis的整合(具体)
a.创建spring中需要的xml文件,扫描注解的配置,排除controller(spring中定义的)
b.引入properties文件
c.数据源的设置(暂定德鲁伊)
d.接管mybatis的sqlSessionFactory对象
b.接管dao接口中所对应的映射
e.事务的控制
   1.事务的bean对象(DataSourceTransactionManager)  2.事务控制的通知与属性 3.aop切面的控制
5.service与dao的测试
注意:测试类上初始化容器,加载配置文件(@Runwith()与@ContextConfiruration(location="classpath*:*.xml")
6.整合spring与springMVC
      a.在web.xml中设置核心控制器,过滤器,对spring进行监听(contextLoaderListener)
      b.在webApplication.xml中扫描包至controller下,支持mvc注解的设置,配置视图解析器(InternalResourceViewResolver)
         补充:1.静态资源配置 2.配置异常解析器 3.强制类型转换配置 4.拦截配置
7.web+service+dao测试